plugins:
  - serverless-offline
  - serverless-python-requirements

service: payment-service
custom:
  pythonRequirements:
    fileName: payments/requirement.txt
    dockerizePip: true

provider:
  name: aws
  runtime: python3.6
  description: Payment Service #optional, Description to publish to AWS
  memorySize: 128
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: payment-service
  deploymentPrefix: serverless

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirement.txt
    - venv/**
    - config.ropsten.json
    - sls_deploy.sh
    - dapp-users-serverless.yml
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - contract_api/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - cli1/**
    - cli2/**
    - node_modules/**
    - dapp_user/**

functions:
  create-order:
    handler: payments/handlers/order_handlers/create
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    events:
      - http:
          path: order/create
          method: post
          private: true
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  initiate-payment:
    handler: payments/handlers/payment_handlers/initiate
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    events:
      - http:
          path: order/{order_id}/payment/{payment_id}/initiate
          method: post
          private: true
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  execute-payment:
    handler: payments/handlers/payment_handlers/execute
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    events:
      - http:
          path: order/{order_id}/payment/{payment_id}/execute
          method: post
          private: true
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  cancel-payment:
    handler: payments/handlers/payment_handlers/cancel
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    events:
      - http:
          path: order/{order_id}/payment/{payment_id}/cancel
          method: post
          private: true
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
